"""Assignment 3
Classify landcover in satellite imagery using an SVC machine learning model trained on a 2020 landcover dataset provided by
the Government of Canada. 
"""

_author_ = 'Delanie_Kidnie'

import rasterio
import numpy as np
import fiona
import sqlite3
from rasterio.plot import reshape_as_image
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

bounds = [422385, 4917435, 472485, 4966185]

filename_training = 'training.gpkg'

filename_image = 'LC08_L2SP_008029_20210816_02_T1\\LC08_L2SP_008029_20210816_02_T1.tif'

with fiona.open(filename_training, layer='training') as training:
    y_labels = np.fromiter([f['properties']['code'] for f in training], int)
    print(y_labels)
    coordinates = [c['geometry']['coordinates'] for c in training]
    print(coordinates)
    with rasterio.open(filename_image) as image:
        profile = image.profile
        band_count = image.count
        window = rasterio.windows.from_bounds(*bounds, image.transform)
        window_transform = rasterio.windows.transform(window, image.transform)
        band_data = image.read(window=window)
        samples = image.sample(coordinates)
        X_samples = np.fromiter(samples, np.dtype((np.uint16, band_count)))



profile['driver'] = 'COG'
profile['transform'] = window_transform
profile['width'] = int(window.width)
profile['height'] = int(window.height)
profile['count'] = 1
profile['blocksize'] = 256
profile['dtype'] = np.uint8

x_train, x_test, y_train, y_test = train_test_split(X_samples, 
                                                    y_labels,
                                                    test_size=0.3,
                                                    stratify=y_labels)

classification = SVC()

classification.fit(x_train, y_train)
test_prediction = classification.predict(x_test)
print(f'Accuracy Score: {accuracy_score(y_test, test_prediction)}')

print(band_data.shape)
band_data = reshape_as_image(band_data)
print(band_data.shape)
band_data = np.reshape(band_data, (-1, band_count))
prediction = classification.predict(band_data)
prediction = prediction.reshape(profile['height'], profile['width'])


with sqlite3.connect(filename_training) as db:
    colours = {}
    cursor = db.cursor()
    cursor.execute(
        """
            select code, red, green, blue
            from landcover_class
        """
    )
    for r in cursor.fetchall():
        colours[r[0]] = [r[1], r[2], r[3]]

with rasterio.open('A3\\classified.tif', mode='w', **profile) as output:
    output.write(prediction, indexes=1)
    output.write_colormap(1, colours)
